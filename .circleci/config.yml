# CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/configuration-reference/ for more details
#
# The following environment variables must be set in the circleci project UI
# - $IMAGE_NAME -> name of image to push to dockerhub
# - $IMAGE_TAG -> tag on image to push to dockerhub
# - $DOCKER_USER -> dockerhub user with permissions to repo
# - $DOCKER_PASS -> password for dockerhub user
#
# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/
#
# Define YAML anchors
var_1: &load_docker_image
  run:
    name: Load Docker image layer cache
    command: |
      docker load -i "/home/circleci/workspace/caches/${CIRCLE_PROJECT_REPONAME}-ci.tar" || true

var_2: &attach_workspace
  attach_workspace:
    at: /home/circleci/workspace/

# Start circleci configuration
version: 2.1
orbs:
  anchore: anchore/anchore-engine@1.5.0
commands:
  run_tox_tests:
    description: Pass path to tests to be run with tox
    parameters:
      test_path:
        type: string
    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-dependencies-{{ .Branch }}-{{ checksum "requirements.txt" }}
    - run:
        name: install dependencies
        command: |
          sudo pip install --upgrade pip
          sudo pip install --upgrade tox
    - run:
        name: run tests
        command: |
          tox << parameters.test_path >> | tee tox.log
    - save_cache:
        paths:
          - ~/project/.tox
        key: v1-dependencies-{{ .Branch }}-{{ checksum "requirements.txt" }}
    - store_artifacts:
        path: tox.log

jobs:
  unit_tests:
    docker:
    - image: circleci/python:3.6
    steps:
    - run_tox_tests:
        test_path: "test/unit"
  
  integration_tests:
    docker:
      - image: circleci/python:3.6
      - image: anchore/test-infra-minio:latest
        command:
          - server
          - /data
      - image: anchore/test-infra-swift:latest
      - image: circleci/postgres:9.6
    environment:
      ANCHORE_TEST_S3_ACCESS_KEY: "9EB92C7W61YPFQ6QLDOU"
      ANCHORE_TEST_S3_SECRET_KEY: "TuHo2UbBx+amD3YiCeidy+R3q82MPTPiyd+dlW+s"
      ANCHORE_TEST_S3_URL: "http://localhost:9000"
      ANCHORE_TEST_S3_BUCKET: "testarchivebucket"

      ANCHORE_TEST_SWIFT_AUTH_URL: "http://localhost:8080/auth/v1.0"
      ANCHORE_TEST_SWIFT_KEY: "testing"
      ANCHORE_TEST_SWIFT_USER: "test:tester"
      ANCHORE_TEST_SWIFT_CONTAINER: "testarchive"

      ANCHORE_TEST_DB_URL: "postgresql+pg8000://postgres@localhost:5432/circle_test"
      ANCHORE_TEST_DB_USER: "postgres"
      ANCHORE_TEST_DB_PASS: "postgres"
      ANCHORE_TEST_DATA_ENV_DIR: "test/data/test_data_env"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run_tox_tests:
          test_path: "test/integration"

#  integration_tests:
#    machine:
#      image: ubuntu-1604:201903-01
#    working_directory: ~/build/anchore-engine
#    steps:
#      - checkout
#      - restore_cache:
#          keys:
#            - v1-dependencies-{{ checksum "requirements.txt" }}
#            # fallback to using the latest cache if no exact match is found
#            - v1-dependencies-
#      - run:
#          name: Install py3 and deps
#          command: |
#            sudo apt-get update -y
#            sudo apt-get install -y python3 python3-dev python3-pip
#      - run:
#          name: install dependencies
#          command: |
#            sudo pip install --upgrade pip
#            sudo pip install --upgrade tox
#            sudo pip install --upgrade docker-compose
#      - run:
#          name: run integration test
#          command: |
#            ./scripts/tests/test_with_deps.sh test/integration/

  build:
    docker:
    - image: circleci/python:3.6
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: build Docker image
        command: |
          CLI_COMMIT=$(git ls-remote git@github.com:anchore/anchore-cli "refs/heads/${CIRCLE_BRANCH}" | awk '{ print $1 }')
          docker build --build-arg ANCHORE_COMMIT="$CIRCLE_SHA1" --build-arg CLI_COMMIT="$CLI_COMMIT" -t "${IMAGE_NAME}:ci" -f ./Dockerfile .
    - run:
        name: Save Docker image
        command: |
          rm -rf /home/circleci/workspace/caches/
          mkdir -p /home/circleci/workspace/caches/
          docker save -o "/home/circleci/workspace/caches/${CIRCLE_PROJECT_REPONAME}-ci.tar" "${IMAGE_NAME}:ci"
    - persist_to_workspace:
        root: /home/circleci/workspace/
        paths:
        - caches/*

  compose_tests:
    machine: true
    steps:
    - checkout
    - <<: *attach_workspace
    - <<: *load_docker_image
    - run:
        name: install dependencies
        command: |
          pip install --upgrade pip
          pip install --upgrade docker-compose
          pip install --upgrade anchorecli
    - run:
        name: docker compose
        command: |
          sed -i "s|anchore/anchore-engine:.*$|${IMAGE_NAME}:ci|g" docker-compose.yaml
          docker-compose up -d
          docker-compose ps
          docker-compose logs engine-api
    - run:
        name: run test
        command: |
          anchore-cli --u admin --p foobar --url http://localhost:8228/v1 system wait --feedsready ''
          docker-compose logs engine-api
          anchore-cli --u admin --p foobar --url http://localhost:8228/v1 system status
          pushd scripts/tests/
          python aetest.py docker.io/alpine:latest
          python aefailtest.py docker.io/alpine:latest
          popd

  push_dockerhub:
    docker:
    - image: docker:stable
    steps:
    - setup_remote_docker
    - <<: *attach_workspace
    - <<: *load_docker_image
    - run:
        name: Push to Dockerhub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          export DEV_IMG_TAG="anchore/anchore-engine-dev:${CIRCLE_SHA1}"
          docker tag "${IMAGE_NAME}:ci" "$DEV_IMG_TAG"
          docker push "$DEV_IMG_TAG"
          if [ "$CIRCLE_BRANCH" == "master" ]; then
            echo "${IMAGE_NAME}:${IMAGE_TAG}"
            docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:${IMAGE_TAG}"
            docker push "${IMAGE_NAME}:${IMAGE_TAG}"
          elif [ "$CIRCLE_BRANCH" == "0.2" ]; then
            echo "${IMAGE_NAME}:v0.2-${IMAGE_TAG}"
            docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:v0.2-${IMAGE_TAG}"
            docker push "${IMAGE_NAME}:v0.2-${IMAGE_TAG}"
          elif [ "$CIRCLE_BRANCH" == "0.3" ]; then
            echo "${IMAGE_NAME}:v0.3-${IMAGE_TAG}"
            docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:v0.3-${IMAGE_TAG}"
            docker push "${IMAGE_NAME}:v0.3-${IMAGE_TAG}"
          elif [ "$CIRCLE_BRANCH" == "0.4" ]; then
            echo "${IMAGE_NAME}:v0.4-${IMAGE_TAG}"
            docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:v0.4-${IMAGE_TAG}"
            docker push "${IMAGE_NAME}:v0.4-${IMAGE_TAG}"
          fi

  trigger_downstream:
    docker:
      - image: anchore/test-infra:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
    - run:
        name: Trigger release candidate builds
        command: |
          source ci_utils.sh
          trigger_artifact_build anchore-engine

workflows:
  default_workflow:
    jobs:
    - unit_tests
    - integration_tests
    - build:
        context: dockerhub
        requires:
        - unit_tests
        - integration_tests
        filters:
          branches:
            only:
            - 'master'
            - '0.4'
            - '0.3'
            - '0.2'
    - compose_tests:
        requires:
        - build
    - push_dockerhub:
        context: dockerhub
        requires:
        - compose_tests
    - trigger_downstream:
        context: release_candidates
        requires:
        - push_dockerhub
    - anchore/image_scan:
        context: dockerhub
        requires:
        - push_dockerhub
        image_name: 'anchore/anchore-engine-dev:${CIRCLE_SHA1}'
        private_registry: true
        timeout: '2000'
